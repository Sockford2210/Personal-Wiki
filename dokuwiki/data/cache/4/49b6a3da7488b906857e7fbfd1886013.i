a:76:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Overview";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:"Layered architecture is a very common approach within software arhcitecture, particularly within monilithic applications, ";}i:2;i:25;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:147;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:147;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"The general benefits of following a layered approach to architecture are that it is:";}i:2;i:149;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:233;}i:9;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:233;}i:10;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:233;}i:11;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:233;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Simple";}i:2;i:237;}i:13;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:244;}i:14;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:244;}i:15;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:244;}i:16;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:244;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" Widely understood ";}i:2;i:248;}i:18;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:267;}i:19;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:267;}i:20;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:267;}i:21;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:267;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:" Provides layers of isolation/abstraction between code, allowing changes to be made in single layers without impact code in others.";}i:2;i:271;}i:23;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:402;}i:24;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:402;}i:25;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:402;}i:26;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:402;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:" Makes components easy to classify, when implementing with attention paid to ensure separation of concerns, it ensures each layer performs it's own function.";}i:2;i:406;}i:28;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:563;}i:29;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:563;}i:30;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:563;}i:31;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:565;}i:32;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Layers";i:1;i:1;i:2;i:565;}i:2;i:565;}i:33;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:565;}i:34;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:586;}i:35;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Presentation Layer";i:1;i:2;i:2;i:586;}i:2;i:586;}i:36;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:586;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:586;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"The presentation or UI layer defines the way that users interact with the underlying application, this is where your controllers, views etc will live.";}i:2;i:617;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:767;}i:40;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:769;}i:41;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Application Layer";i:1;i:2;i:2;i:769;}i:2;i:769;}i:42;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:769;}i:43;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:769;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"Concerns the main program of the system.";}i:2;i:799;}i:45;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:839;}i:46;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:841;}i:47;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Business Layer";i:1;i:2;i:2;i:841;}i:2;i:841;}i:48;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:841;}i:49;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:841;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Also known as the ";}i:2;i:868;}i:51;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:886;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Domain Layer";}i:2;i:888;}i:53;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:900;}i:54;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:210:"
This is where business logic sits and defines the business compenents of your system. This is where business models such as 'Products', 'Accounts' etc that are directly related to business concerns might live.";}i:2;i:902;}i:55;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1112;}i:56;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1114;}i:57;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Persistence Layer";i:1;i:2;i:2;i:1114;}i:2;i:1114;}i:58;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1114;}i:59;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1114;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:178:"This contains the code required to access the database layer, and will contain the code required to manipulate content in the database such as SQL scripts and connection details.";}i:2;i:1144;}i:61;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1322;}i:62;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1324;}i:63;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Database Layer";i:1;i:2;i:2;i:1324;}i:2;i:1324;}i:64;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1324;}i:65;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1324;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:211:"The lowest layer, and will handle CRUD operations directly with the database, as well as containing things such as indexes to expose data but keep stuff that application layer doesn't need to know about hidden. ";}i:2;i:1351;}i:67;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1562;}i:68;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1564;}i:69;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"Further Reading";i:1;i:2;i:2;i:1564;}i:2;i:1564;}i:70;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1564;}i:71;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1564;}i:72;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:100:"https://www.indeed.com/career-advice/career-development/what-are-the-layers-in-software-architecture";i:1;N;}i:2;i:1592;}i:73;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1696;}i:74;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1697;}i:75;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:1697;}}