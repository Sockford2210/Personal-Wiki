a:187:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Python";i:1;i:2;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"Python Virutal Machine";i:1;i:3;i:2;i:18;}i:2;i:18;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:18;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:604:"The Python Virtual Machine (PVM) is the runtime engine that executes Python code. It's essentially a program that interprets and executes bytecode, which is an intermediate representation of Python source code.
It serves as an abstraction layer between the Python bytecode and the underlying hardware, providing a consistent environment for running Python programs across different platforms; so similar to the Java Virtual Machine, it allows you to write python scripts agnostically of the underlying system running them. 
The Python VM is implemented in CPython, the reference implementation of Python.";}i:2;i:49;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:653;}i:9;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:655;}i:10;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Case Conventions";i:1;i:3;i:2;i:655;}i:2;i:655;}i:11;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:655;}i:12;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:679;}i:13;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:679;}i:14;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:679;}i:15;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:683;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Classes";}i:2;i:685;}i:17;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:692;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" - PascalCase";}i:2;i:694;}i:19;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:707;}i:20;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:707;}i:21;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:707;}i:22;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:707;}i:23;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:711;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Functions";}i:2;i:713;}i:25;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:722;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" - lower_snake_case";}i:2;i:724;}i:27;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:743;}i:28;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:743;}i:29;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:743;}i:30;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:743;}i:31;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:747;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Variables";}i:2;i:749;}i:33;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:758;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" - lower_snake_case";}i:2;i:760;}i:35;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:779;}i:36;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:779;}i:37;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:779;}i:38;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:779;}i:39;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"Indention is important in python as it defines scope. E.g. all code inside of a function is indented on level deeper than the function definition statement.";}i:2;i:781;}i:40;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:937;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:937;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:143:"Single line comments are defined by a '#' at the beginning of text you want to comment out, the comment will ontinue for the rest of that line.";}i:2;i:939;}i:43;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1082;}i:44;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1084;}i:45;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Console";i:1;i:3;i:2;i:1084;}i:2;i:1084;}i:46;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1084;}i:47;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1100;}i:48;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"Input";i:1;i:4;i:2;i:1100;}i:2;i:1100;}i:49;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1100;}i:50;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1100;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"A string input can be collected from the console using the 'input' method";}i:2;i:1112;}i:52;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1191;}i:53;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:36:"
name = input('What is your name?')
";i:1;s:6:"python";i:2;N;}i:2;i:1191;}i:54;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1244;}i:55;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"Output";i:1;i:4;i:2;i:1244;}i:2;i:1244;}i:56;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1244;}i:57;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1244;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"String can be output to the console using the 'print' method:";}i:2;i:1257;}i:59;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1324;}i:60;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:26:"
print('My name is Ryan')
";i:1;s:6:"python";i:2;N;}i:2;i:1324;}i:61;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1367;}i:62;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Strings";i:1;i:3;i:2;i:1367;}i:2;i:1367;}i:63;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1367;}i:64;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1367;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:288:"Strings in python can be defined with double or single quotations.
Formatted literal strings
A formatted literal string can be created by adding an 'f' to the beginning of the string or by using the string.format() function, you can then reference string variables from within the string.";}i:2;i:1383;}i:66;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1671;}i:67;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:91:"
print(f'Very nice to meet you, {name}!')
print('Very nice to meet you, {}!'.format(name))
";i:1;s:6:"python";i:2;N;}i:2;i:1678;}i:68;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1786;}i:69;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Variables";i:1;i:3;i:2;i:1786;}i:2;i:1786;}i:70;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1786;}i:71;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1786;}i:72;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"Variables are declared with the following syntax, name = ";}i:2;i:1804;}i:73;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1861;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"Ryan";}i:2;i:1862;}i:75;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1866;}i:76;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1867;}i:77;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1869;}i:78;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Casting";i:1;i:4;i:2;i:1869;}i:2;i:1869;}i:79;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1869;}i:80;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1869;}i:81;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"Where necessary you can cast a variable to a different type, ";}i:2;i:1883;}i:82;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1949;}i:83;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:23:"temperature = str(97.5)";i:1;s:6:"python";i:2;N;}i:2;i:1949;}i:84;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1949;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"int(), float() and bool() are other examples.";}i:2;i:1988;}i:86;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2033;}i:87;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2033;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:"You can get the name of the datatype of variable using the type() method
e.g. type(temperature)";}i:2;i:2035;}i:89;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2130;}i:90;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2132;}i:91;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"Conditional Statements";i:1;i:3;i:2;i:2132;}i:2;i:2132;}i:92;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2132;}i:93;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2132;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"Conditional statements in python can be defined as ";}i:2;i:2163;}i:95;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2214;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"if";}i:2;i:2216;}i:97;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2218;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:2220;}i:99;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2222;}i:100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"elif";}i:2;i:2224;}i:101;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2228;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:", and ";}i:2;i:2230;}i:103;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2236;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"else";}i:2;i:2238;}i:105;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2242;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" where an elif statement only executes if the condition of the preceding it statement was not met.";}i:2;i:2244;}i:107;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2348;}i:108;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:196:"
if score >= 80:
   print('You pass the course with flying colours!')
 
elif score > 65:
   print('You pass the course! Talk to your instructor.')
  
else:
   print('You do not pass the course!')
";i:1;s:6:"python";i:2;N;}i:2;i:2348;}i:109;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2561;}i:110;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"Loops";i:1;i:3;i:2;i:2561;}i:2;i:2561;}i:111;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2561;}i:112;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2561;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"There are two different categories of loop in python, ";}i:2;i:2575;}i:114;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2629;}i:115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"for";}i:2;i:2631;}i:116;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2634;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:2636;}i:118;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2641;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"while";}i:2;i:2643;}i:120;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2648;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:2650;}i:122;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2651;}i:123;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2653;}i:124;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:3:"For";i:1;i:4;i:2;i:2653;}i:2;i:2653;}i:125;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:2653;}i:126;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2653;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"For loops iterate through an array and define the single item inline in the loop like a foreach.";}i:2;i:2663;}i:128;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2765;}i:129;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:56:"
nums = [3, 4, 16]

for num in nums:
   print(num ** 2)
";i:1;s:6:"python";i:2;N;}i:2;i:2765;}i:130;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2838;}i:131;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"While";i:1;i:4;i:2;i:2838;}i:2;i:2838;}i:132;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:2838;}i:133;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2838;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:"While loops define a condition and repeat until that condition is no longer true.";}i:2;i:2850;}i:135;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2937;}i:136;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:48:"
i = 3
while i < 258:
   print(i)
   i = i ** 2
";i:1;s:6:"python";i:2;N;}i:2;i:2937;}i:137;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2937;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"There are three keywords used to control/disrupt loops:";}i:2;i:3002;}i:139;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3057;}i:140;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:3057;}i:141;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3057;}i:142;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3057;}i:143;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3061;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"continue";}i:2;i:3063;}i:145;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3071;}i:146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" - skips to the next iteration.";}i:2;i:3073;}i:147;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3104;}i:148;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3104;}i:149;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3104;}i:150;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3104;}i:151;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3108;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"break";}i:2;i:3110;}i:153;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3115;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" - exits the loop";}i:2;i:3117;}i:155;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3134;}i:156;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3134;}i:157;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3134;}i:158;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3134;}i:159;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3138;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"pass";}i:2;i:3140;}i:161;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3144;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:" - literally does nothing, is effectively just a placeholder akin to a commented out line saying 'Do nothing'";}i:2;i:3146;}i:163;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3255;}i:164;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3255;}i:165;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3255;}i:166;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3257;}i:167;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Error Handling";i:1;i:3;i:2;i:3257;}i:2;i:3257;}i:168;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3257;}i:169;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3257;}i:170;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"Python code can be wrapped in a ";}i:2;i:3280;}i:171;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3312;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"try";}i:2;i:3314;}i:173;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3317;}i:174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:" block, which if an unhandled error occurs, will fall over to the subsequent ";}i:2;i:3319;}i:175;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3396;}i:176;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"except";}i:2;i:3398;}i:177;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3404;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" block, an optional ";}i:2;i:3406;}i:179;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3426;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"finally";}i:2;i:3428;}i:181;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3435;}i:182;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:" block contains code that will execute regardless of whether the code in the try block failed or not.";}i:2;i:3437;}i:183;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3544;}i:184;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:184:"
nums = ['x', 'y', 'z']
 
try:
   print(sum(nums))
 
except:
   print('Cannot print the sum! Your variables are not numbers.')
 
finally:
   print('Hope you got the result you want!')
";i:1;s:6:"python";i:2;N;}i:2;i:3544;}i:185;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3743;}i:186;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:3743;}}